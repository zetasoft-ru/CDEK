////////////////////////////////////////////////////////////////////////////////
// зс_сдэк_ИнтеграцияСервер: процедуры и функции работы с API integration.cdek.ru (см. https://www.cdek.ru/clients/integrator.html)
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

//Описание метода
//https://www.cdek.ru/clients/integrator.html
//
// Возвращаемое значение:
//   Структура   - см. ОбщийСерверWSG.ИнициализироватьСтруктуруВозврата()
//
Функция ПолучитьСписокПунктовВыдачиЗаказов(СтруктураПараметровURI, СтруктураПараметровЗапроса) Экспорт
	
	ИмяМетода = "ПолучитьСписокПунктовВыдачиЗаказов";
	
	АдресСервиса = Константы.зс_сдэк_АдресСервераИнтеграцииДляИнтернетМагазинов.Получить();
	ЗащищенноеСоединение = Ложь;
	
	//значения по умолчанию
	Если СтруктураПараметровЗапроса = Неопределено Тогда
		СтруктураПараметровЗапроса = Новый Структура;
	КонецЕсли;
	
	СтруктураВозврата = зс_инт_ИнтеграцияОбщийСервер.ИнициализироватьДанныеИВыполнитьПроверки(ИмяМетода);
	
	Если НЕ СтруктураВозврата.ПараметрыПроверены Тогда
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	ФормальныеПараметрыURI = "pvzlist.php";
	
	МассивЗаголовки = Новый Массив;
	//ЗаголовокHTTP = Новый Структура;
	//ЗаголовокHTTP.Вставить("Заголовок", "Content-Type");
	//ЗаголовокHTTP.Вставить("Значение", "application/x-www-form-urlencoded");
	//МассивЗаголовки.Добавить(ЗаголовокHTTP);
	
	//СтруктураВозврата = зс_инт_ИнтеграцияОбщийСервер.ВыполнитьЗапрос(СтруктураВозврата, ФормальныеПараметрыURI, СтруктураПараметровURI, СтруктураПараметровЗапроса);
	СтруктураВозврата = зс_инт_ИнтеграцияОбщийСервер.ВыполнитьЗапрос(СтруктураВозврата,
																	АдресСервиса, 
																	ЗащищенноеСоединение, 
																	ФормальныеПараметрыURI, 
																	, 
																	, 
																	МассивЗаголовки);
																	
	Если СтруктураВозврата.ДанныеПолучены Тогда
																	
		ЕстьОшибки = ОбработатьОшибкиВТелеОтвета(СтруктураВозврата, "XML");
		
		Если НЕ ЕстьОшибки Тогда
		
			МассивОписанийПунктовВыдачи = ПрочитатьОтветСписокПунктовВыдачиЗаказа(СтруктураВозврата.Данные);
			
			СтруктураВозврата.Данные = МассивОписанийПунктовВыдачи;
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат СтруктураВозврата;	
	
КонецФункции

//Описание метода
//https://www.cdek.ru/clients/integrator.html
//
// Возвращаемое значение:
//   Структура   - см. ОбщийСерверWSG.ИнициализироватьСтруктуруВозврата()
//
Функция ПолучитьСтоимостьИСрокДоставки(СтруктураПараметровЗапроса) Экспорт
	
	ИмяМетода = "ПолучитьСтоимостьИСрокДоставки";
	
	АдресСервиса = Константы.зс_сдэк_АдресСервераИнтеграцииОбщий.Получить();
	ЗащищенноеСоединение = Ложь;
	
	//значения по умолчанию
	Если СтруктураПараметровЗапроса = Неопределено Тогда
		СтруктураПараметровЗапроса = Новый Структура;
	КонецЕсли;
	
	МассивОбязательныхПараметровЗапроса = Новый Массив;
	МассивОбязательныхПараметровЗапроса.Добавить("version");
	МассивОбязательныхПараметровЗапроса.Добавить("senderCityId");
	МассивОбязательныхПараметровЗапроса.Добавить("receiverCityId");
	МассивОбязательныхПараметровЗапроса.Добавить("tariffId");
	МассивОбязательныхПараметровЗапроса.Добавить("goods");
	
	Если СтруктураПараметровЗапроса.Свойство("secure") Тогда // надо преобразовать в хеш от кода и даты отправки заказа
		
		МассивОбязательныхПараметровЗапроса.Добавить("authLogin");
		МассивОбязательныхПараметровЗапроса.Добавить("dateExecute");
		
	КонецЕсли;
	
	Если СтруктураПараметровЗапроса.Свойство("dateExecute") Тогда
		
		СтруктураПараметровЗапроса.dateExecute = Формат(СтруктураПараметровЗапроса.dateExecute, "ДФ=yyyy-MM-dd");
		
	КонецЕсли;
	
	СтруктураВозврата = зс_инт_ИнтеграцияОбщийСервер.ИнициализироватьДанныеИВыполнитьПроверки(ИмяМетода, Истина,
																				, , 
																				СтруктураПараметровЗапроса, МассивОбязательныхПараметровЗапроса);
	
	Если НЕ СтруктураВозврата.ПараметрыПроверены Тогда
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	Если СтруктураПараметровЗапроса.Свойство("secure") Тогда // надо преобразовать в хеш от кода и даты отправки заказа
		
		СтруктураПараметровЗапроса.secure = ПолучитьХешОтПароляДляАвторизации(СтруктураПараметровЗапроса.dateExecute, СтруктураПараметровЗапроса.secure);		
		
	КонецЕсли;
	
	ФормальныеПараметрыURI = "calculator/calculate_price_by_json.php";
	
	МассивЗаголовки = Новый Массив;
	ЗаголовокHTTP = Новый Структура;
	ЗаголовокHTTP.Вставить("Заголовок", "Content-Type");
	ЗаголовокHTTP.Вставить("Значение", "application/json");
	МассивЗаголовки.Добавить(ЗаголовокHTTP);
	
	СтруктураВозврата = зс_инт_ИнтеграцияОбщийСервер.ВыполнитьЗапрос(СтруктураВозврата, 
																	АдресСервиса, 
																	ЗащищенноеСоединение,
																	ФормальныеПараметрыURI, 
																	, 
																	СтруктураПараметровЗапроса, 
																	МассивЗаголовки, 
																	"POST");
																	
																	
	ЕстьОшибки = ОбработатьОшибкиВТелеОтвета(СтруктураВозврата, "JSON");
	
	Возврат СтруктураВозврата;	
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьХешОтПароляДляАвторизации(Знач ДатаДляХеша, Знач Пароль) Экспорт
	
	СтрокаДляХеша = ДатаДляХеша + "&" + Пароль;

	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);

	Хеш.Добавить(СтрокаДляХеша);

	Возврат СтрЗаменить(Строка(Хеш.ХешСумма)," ","")
   
КонецФункции

Функция Инициализировать_СписокПунктовВыдачиЗаказа() Экспорт
	
	Коллекция = Новый Соответствие();
	
	Коллекция.Вставить("Code", "");
	Коллекция.Вставить("Name", "");
	Коллекция.Вставить("CityCode", ""); // не соответствует описанию поставщика, возвращается строка, а не число
	Коллекция.Вставить("City", "");
	Коллекция.Вставить("WorkTime", "");
	Коллекция.Вставить("Address", "");
	Коллекция.Вставить("Phone", "");
	Коллекция.Вставить("Note", "");
	Коллекция.Вставить("CoordX", 0);
	Коллекция.Вставить("CoordY", 0);
	Коллекция.Вставить("WeightMin", 0);
	Коллекция.Вставить("WeightMax", 0);
	Коллекция.Вставить("Type", "");
	Коллекция.Вставить("OwnerCode", "");
	Коллекция.Вставить("CountryCode", "");  // не соответствует описанию поставщика, возвращается строка, а не число
	Коллекция.Вставить("CountryName", "");
	Коллекция.Вставить("RegionCode", ""); // не соответствует описанию поставщика, возвращается строка, а не число
	Коллекция.Вставить("RegionName", "");
	Коллекция.Вставить("FullAddress", "");
	Коллекция.Вставить("IsDressingRoom", "");
	Коллекция.Вставить("HaveCashless", "");
	Коллекция.Вставить("NearestStation", "");
	Коллекция.Вставить("Site", "");
	Коллекция.Вставить("MetroStation", "");
	Коллекция.Вставить("WorkTimeY", Новый Массив);
	Коллекция.Вставить("OfficeImage", Новый Массив);
	Коллекция.Вставить("OfficeHowGo", Новый Массив);
	Коллекция.Вставить("ХешОписанияПоставщика", ""); // наш реквизит, нужен для контроля изменений (хеш
	
	Возврат Коллекция;
	
КонецФункции

Функция Инициализировать_ОписаниеТовара(ВесКг = 0, ДлинаСм = 0, ШиринаСм = 0, ВысотаСм = 0) Экспорт
	
	Коллекция = Новый Структура();
	Коллекция.Вставить("weight", 	ВесКг);
	Коллекция.Вставить("length", 	ДлинаСм);
	Коллекция.Вставить("width", 	ШиринаСм);
	Коллекция.Вставить("height", 	ВысотаСм);
	
	Возврат Коллекция;
	
КонецФункции

Функция ПрочитатьОтветСписокПунктовВыдачиЗаказа(СтрокаXML) Экспорт
	
	// теперь разберем ответ
	МассивОписанийПунктовВыдачи = Новый Массив;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ПараметрыЧтенияXML = Новый ПараметрыЧтенияXML( , , , , Истина, Истина, Истина, Истина, Истина);
	
	ЧтениеXML.УстановитьСтроку(СтрокаXML, ПараметрыЧтенияXML);
	
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Pvz" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // новый пункт выдачи
						
			ОписаниеСпискаПунктаВыдачи = Инициализировать_СписокПунктовВыдачиЗаказа();
			
			СтрокаДляХеша = "";
			
			Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
				
				Если ЧтениеXML.Имя = "WorkTimeY" Тогда // расписание в рамках дня недели
					
				ИначеЕсли ЧтениеXML.Имя = "OfficeImage" Тогда // фотографии офиса
					
				ИначеЕсли ЧтениеXML.Имя = "OfficeHowGo" Тогда // фотографии как добратся 
					
				Иначе
					
					Если ОписаниеСпискаПунктаВыдачи.Получить(ЧтениеXML.Имя) <> Неопределено Тогда
						
						Если ТипЗнч(ЧтениеXML.Значение) = Тип("Строка") Тогда
							
							Значение = СокрЛП(ЧтениеXML.Значение);
							
						Иначе
							
							Значение = ЧтениеXML.Значение;
							
						КонецЕсли;
						
						ОписаниеСпискаПунктаВыдачи.Вставить(ЧтениеXML.Имя, Значение);
						
						СтрокаДляХеша = СтрокаДляХеша + Строка(ЧтениеXML.Имя) + Строка(ЧтениеXML.Значение);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Хеширование = Новый ХешированиеДанных(ХешФункция.MD5);
			Хеширование.Добавить(СтрокаДляХеша);
			ОписаниеСпискаПунктаВыдачи["ХешОписанияПоставщика"] = Строка(Хеширование.ХешСумма);
			
			МассивОписанийПунктовВыдачи.Добавить(ОписаниеСпискаПунктаВыдачи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Возврат МассивОписанийПунктовВыдачи;
	
КонецФункции

Функция ОбработатьОшибкиВТелеОтвета(СтруктураВозврата, ВидОтвета) Экспорт
	
	ЕстьОшибки = Ложь;
	
	// описание ошибки в XML
	//	<?xml version="1.0" encoding="UTF-8"?>
	//	<response><MsgCode=«ErrorCode»,  Msg="Error: описание ошибки"/></response>

	// описание ошибки в JSON
	//•	Array. Массив ошибок (см. Приложение 3), каждый элемент которого состоит из:
	//•	code
	//integer, код ошибки;
	//•	text
	//string, текст ошибки.
	
	Если ВидОтвета = "XML" Тогда
		
		Возврат Ложь;
		
		//СтрокаXML = СтруктураВозврата.Данные;
		//
		//ЧтениеXML = Новый ЧтениеXML;
		//
		//ПараметрыЧтенияXML = Новый ПараметрыЧтенияXML( , , , , Истина, Истина, Истина, Истина, Истина);
		//
		//ЧтениеXML.УстановитьСтроку(СтрокаXML, ПараметрыЧтенияXML);
		//
		//ЧтениеXML.Прочитать();
		//
		//Пока ЧтениеXML.Прочитать() Цикл
		//	
		//	Если ЧтениеXML.Имя = "MsgCode" и ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда // новая ошибка
		//		
		//		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		//			
		//			Имя = ЧтениеXML.Имя;
		//			
		//		КонецЦикла;
		//		
		//	КонецЕсли;
		//	
		//КонецЦикла;
		
	ИначеЕсли ВидОтвета = "JSON" Тогда
		
		Возврат Ложь;
		
	Иначе
		
		ЕстьОшибки = Истина;
		
		СтруктураВозврата.ДанныеПолучены = Ложь;
		СтруктураВозврата.ОписаниеОшибки = "В функцию обработки ошибок передан неизвестный вид ответа";
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;	

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

//Описание метода
//http://wsg.zetasoft.ru/ru-RU/Help/???
//
// Возвращаемое значение:
//   Структура   - см. ОбщийСерверWSG.ИнициализироватьСтруктуруВозврата()
//
//Функция ВызватьМетод(СтруктураПараметровURI, СтруктураПараметровЗапроса) Экспорт
//	
//	ИмяМетода = "ИмяМетода";
//	
//	АдресСервиса = Константы..Получить();
//	ЗащищенноеСоединение = Ложь;
//
//	//значения по умолчанию
//	Если СтруктураПараметровЗапроса = Неопределено Тогда
//		СтруктураПараметровЗапроса = Новый Структура;
//	КонецЕсли;
//	
//	МассивОбязательныхПараметровURI = Новый Массив;
//	МассивОбязательныхПараметровURI.Добавить("masterLogin");
//	МассивОбязательныхПараметровURI.Добавить("masterPassword");
//
//	МассивОбязательныхПараметровЗапроса = Новый Массив;
//	МассивОбязательныхПараметровЗапроса.Добавить("");
//	
//	СтруктураВозврата = зс_инт_ИнтеграцияОбщийСервер.ИнициализироватьДанныеИВыполнитьПроверки(ИмяМетода, ОжидаемОтветВJSON,
//																				СтруктураПараметровURI, МассивОбязательныхПараметровURI, 
//																				СтруктураПараметровЗапроса, МассивОбязательныхПараметровЗапроса);
//	
//	Если НЕ СтруктураВозврата.ПараметрыПроверены Тогда
//		
//		Возврат СтруктураВозврата;
//		
//	КонецЕсли;
//	
//	ФормальныеПараметрыURI = "api/admin/Ping";
//	
//	//значения по умолчанию
//	Если СтруктураПараметровURI.Свойство("Parametr") Тогда
//		ФормальныеПараметрыURI = ФормальныеПараметрыURI + "Parametr={Parametr}";
//	КонецЕсли;
//
//	СтруктураВозврата = зс_инт_ИнтеграцияОбщийСервер.ВыполнитьЗапрос(СтруктураВозврата, 
//																	АдресСервиса, 
//																	ЗащищенноеСоединение, 
//																	ФормальныеПараметрыURI, 
//																	СтруктураПараметровURI, 
//																	СтруктураПараметровЗапроса);
//	
//	Возврат СтруктураВозврата;	
//	
//КонецФункции
