////////////////////////////////////////////////////////////////////////////////
// зс_инт_ИнтеграцияОбщийСервер: общие процедуры и функции работы с API
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает структуру с актуальным адресом сервера интерграции и необходимостью использования защищенного соединения
//
// Параметры:
//
// Возвращаемое значение:
//   Структура   - структура со свойствами
//					* АдресСервиса - строка
//					* ЗащищенноеСоединение - Булево
//
Функция ПолучитьПараметрыПодключенияКСервисуИнтеграции(АдресСервиса, ЗащищенноеСоединение = Ложь) Экспорт

	НормализоватьАдресСервиса(АдресСервиса, ЗащищенноеСоединение);
	
	СтруктураПараметровПодключения = Новый Структура;
	СтруктураПараметровПодключения.Вставить("АдресСервиса", 		АдресСервиса);
	СтруктураПараметровПодключения.Вставить("ЗащищенноеСоединение", ЗащищенноеСоединение);
	
	Возврат Новый ФиксированнаяСтруктура(СтруктураПараметровПодключения);

КонецФункции // ПолучитьПараметрыПодлюченияКWSG()

Функция ИнициализироватьДанныеИВыполнитьПроверки(ИмяМетода, ОжидаемОтветВJSON = Ложь,
												СтруктураПараметровURI = Неопределено, 
												МассивОбязательныхПараметровURI = Неопределено, 
												СтруктураПараметровЗапроса = Неопределено, 
												МассивОбязательныхПараметровЗапроса = Неопределено) Экспорт
	
	СтруктураВозврата = ИнициализироватьСтруктуруВозврата(ИмяМетода, ОжидаемОтветВJSON);
	
	ПривестиПараметрыURIКСтроке(СтруктураПараметровURI);
		
	СтруктураВозврата.ПараметрыПроверены = ПроверитьОбязательныеРеквизиты(СтруктураВозврата, СтруктураПараметровURI, МассивОбязательныхПараметровURI, СтруктураПараметровЗапроса, МассивОбязательныхПараметровЗапроса);
	
	КодироватьСтруктуруПараметровДляURL(СтруктураПараметровURI);
	
	КодироватьСтруктуруПараметровДляURL(СтруктураПараметровЗапроса);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура НормализоватьАдресСервиса(АдресСервиса, ЗащищенноеСоединение) Экспорт
	
	АдресСервиса = СокрЛП(АдресСервиса);
	
	Если ЗащищенноеСоединение = Неопределено Тогда
		
		Если НРег(Лев(АдресСервиса, 8)) = "https://" Тогда
			
			ЗащищенноеСоединение = Истина;
			
		Иначе
			
			ЗащищенноеСоединение = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	АдресСервиса = СтрЗаменить(АдресСервиса, "https://", "");
	АдресСервиса = СтрЗаменить(АдресСервиса, "http://", "");
	
КонецПроцедуры // НормализоватьАдресСервиса()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДобавитьОтметкуВремени(МассивОтметок, Метка = "") Экспорт
	
	СтруктураОтметки = Новый Структура("Метка, Время, ОтПервого, ОтПредыдущего", Метка, ТекущаяУниверсальнаяДатаВМиллисекундах(), 0, 0);
	
	ТекущийИндексОтметки = МассивОтметок.Количество() - 1;
	
	Если ТекущийИндексОтметки > -1 Тогда //получаем вторую и следующие отметки
		
		СтруктураОтметки.ОтПервого = (СтруктураОтметки.Время - МассивОтметок[0].Время) / 1000;
		
		СтруктураОтметки.ОтПредыдущего = (СтруктураОтметки.Время - МассивОтметок[ТекущийИндексОтметки].Время) / 1000;
		
	КонецЕсли;

	МассивОтметок.Добавить(СтруктураОтметки);

КонецПроцедуры // ДобавитьОтметкуВремени()

// Возвращает строку, закодированную в кодировке URL
//
// Параметры:
//  Параметр - Строка
// 
// Возвращаемое значение:
//   - Строка
//
Функция КодироватьСтрокуДляURL(Знач Параметр) Экспорт

	Параметр = КодироватьСтроку(Параметр, СпособКодированияСтроки.КодировкаURL);
	
	Возврат Параметр;
	
КонецФункции // КодироватьСтрокуДляURL()

// Заменяет параметры URI в фигурных скобках на значения параметров из структуры параметров
// например, 
//	СтруктураПараметровURI 	Структура("masterLogin, masterPassword", "login", "password");
//	ВходящаяСтрока 			"api/admin/CacheState?masterLogin={masterLogin}&masterPassword={masterPassword}";
//	ВозвращаемаяСтрока 		"api/admin/CacheState?masterLogin=login&masterPassword=password";
//
// Параметры:
//  СтрокаПараметровURI  - Строка - <описание параметра>
//  СтруктураПараметровURI  - Структура - Ключ - имя параметра, Значение - значение параметра
//
// Возвращаемое значение:
//   Строка   - строка с подставленными значениями
//
Функция РазвернутьСтруктуруПараметровURIВСтрокуПараметровURI(Знач СтрокаПараметровURI, СтруктураПараметровURI) Экспорт
	
	СтрокаПараметровURI = НРЕГ(СтрокаПараметровURI);
	
	Если ТипЗнч(СтруктураПараметровURI) = Тип("Структура") Тогда
	
		Для каждого Параметр Из СтруктураПараметровURI Цикл
			
			СтрокаПараметровURI = СтрЗаменить(СтрокаПараметровURI, "{" + НРЕГ(Параметр.Ключ) + "}", НРЕГ(Параметр.Значение));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаПараметровURI;

КонецФункции // РазвернутьСтруктуруПараметровURIВСтрокуПараметровURI()

// Заменяет параметры URI в фигурных скобках на значения параметров из структуры параметров
// например, 
//	СтруктураПараметровURI 	Структура("masterLogin, masterPassword", "login", "password");
//	ВходящаяСтрока 			"api/admin/CacheState?masterLogin={masterLogin}&masterPassword={masterPassword}";
//	ВозвращаемаяСтрока 		"api/admin/CacheState?masterLogin=login&masterPassword=password";
//
// Параметры:
//  СтрокаПараметровURI  - Строка - <описание параметра>
//  СтруктураПараметровURI  - Структура - Ключ - имя параметра, Значение - значение параметра
//
// Возвращаемое значение:
//   Строка   - строка с подставленными значениями
//
Функция РазвернутьСтруктуруПараметровЗапросаВJSON(СтруктураПараметровЗапроса) Экспорт
	
	СтрокаJSON = "";
	
	Если ТипЗнч(СтруктураПараметровЗапроса) = Тип("Структура") ИЛИ
			ТипЗнч(СтруктураПараметровЗапроса) = Тип("Массив") Тогда
			
		НастройкиСериализации = Новый НастройкиСериализацииJSON;
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, СтруктураПараметровЗапроса, НастройкиСериализации);		
		СтрокаJSON = ЗаписьJSON.Закрыть();
		
	КонецЕсли;
	
	Возврат СтрокаJSON;

КонецФункции // РазвернутьСтруктуруПараметровURIВСтрокуПараметровURI()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыполнитьЗапрос(СтруктураВозврата,
						АдресСервиса,
						ЗащищенноеСоединение,
						ФормальныеПараметрыURI, 
						СтруктураПараметровURI = Неопределено,
						СтруктураПараметровЗапроса = Неопределено, 
						МассивЗаголовки = Неопределено, 
						ВидЗапроса = "GET", 
						СжиматьОтвет = Ложь, 
						ПолучитьТелоКак = "Строка", 
						КодировкаТекста = "UTF-8") Экспорт
						
	ПараметрыПодключения = ПолучитьПараметрыПодключенияКСервисуИнтеграции(АдресСервиса, ЗащищенноеСоединение);
		
	СтрокаПараметровURI = РазвернутьСтруктуруПараметровURIВСтрокуПараметровURI(ФормальныеПараметрыURI, СтруктураПараметровURI);
	
	CтрокаПараметровЗапроса = РазвернутьСтруктуруПараметровЗапросаВJSON(СтруктураПараметровЗапроса);
	
	ДобавитьОтметкуВремени(СтруктураВозврата.ОтметкиВремени, СтруктураВозврата.ИмяМетода + ": отправлен запрос");
	
	СтруктураОтвета = зс_инт_ЗапросHTTP.ПолучитьОтветНаЗапрос(ПараметрыПодключения.ЗащищенноеСоединение, ПараметрыПодключения.АдресСервиса, СтрокаПараметровURI, МассивЗаголовки, CтрокаПараметровЗапроса, ВидЗапроса, СжиматьОтвет, ПолучитьТелоКак, КодировкаТекста);
	
	ДобавитьОтметкуВремени(СтруктураВозврата.ОтметкиВремени, СтруктураВозврата.ИмяМетода + ": получен ответ");
	
	СтруктураВозврата.КодСостояния = СтруктураОтвета.КодСостояния;
	
	Если СтруктураОтвета.ЗапросОбработанУспешно Тогда
		
		// todo
		// в некоторых случаях, например, в СДЭК ответ приходит с кодом 200,
		// а ошибки передаются в теле ответа, 
		// поэтому для таких провайдеров ошибки нужно обрабатывать здесь 
		
		СтруктураВозврата.ДанныеПолучены = Истина;
		
		Если СтруктураВозврата.ОжидаемОтветВJSON Тогда
			
			ОписаниеОшибки = "";
			
			Данные = УниверсальноПрочитатьJSON(СтруктураОтвета.ТелоОтвета, ОписаниеОшибки);
			
			Если Данные = Неопределено Тогда //не удалось прочитать JSON 
				
				СтруктураВозврата.ДанныеПолучены = Ложь;
				СтруктураВозврата.ОписаниеОшибки = "Не удалось разобрать ответ сервера по причине: " + ОписаниеОшибки;
				
			Иначе
				
				СтруктураВозврата.Данные = Данные;
				
			КонецЕсли;
			
		Иначе
		
			СтруктураВозврата.Данные = СтруктураОтвета.ТелоОтвета;
			
		КонецЕсли;
			
	Иначе
		
		СтруктураВозврата.ДанныеПолучены = Ложь;
		СтруктураВозврата.ОписаниеОшибки = СтруктураОтвета.ОписаниеОшибки;
	
	КонецЕсли;
	
	//уберем недопустимые символы из описания ошибки
	Позиция = НайтиНедопустимыеСимволыXML(СтруктураВозврата.ОписаниеОшибки);
	Пока Позиция <> 0 Цикл
		
		НедопустимыйСимвол = Сред(СтруктураВозврата.ОписаниеОшибки, Позиция, 1);
		
		СтруктураВозврата.ОписаниеОшибки = СтрЗаменить(СтруктураВозврата.ОписаниеОшибки, НедопустимыйСимвол, "");
		
		Позиция = НайтиНедопустимыеСимволыXML(СтруктураВозврата.ОписаниеОшибки);
		
	КонецЦикла;	
	
	Возврат СтруктураВозврата;

КонецФункции // ВыполнитьЗапрос()

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ИнициализироватьСтруктуруВозврата(ИмяМетода, ОжидаемОтветВJSON = Ложь) Экспорт

	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("ИмяМетода", 			ИмяМетода);
	СтруктураОтвета.Вставить("ПараметрыПроверены", 	Ложь);
	СтруктураОтвета.Вставить("ДанныеПолучены", 		Ложь);
	СтруктураОтвета.Вставить("Данные", 				Неопределено);
	СтруктураОтвета.Вставить("ОтметкиВремени", 		Новый Массив);
	СтруктураОтвета.Вставить("КодСостояния", 		-1);
	СтруктураОтвета.Вставить("ОжидаемОтветВJSON",	ОжидаемОтветВJSON);
	СтруктураОтвета.Вставить("ОписаниеОшибки", 		"");
	
	Возврат СтруктураОтвета;

КонецФункции // ИнициализироватьСтруктуруВозврата()

Процедура ПривестиПараметрыURIКСтроке(СтруктураПараметровURI) Экспорт
	
	Если ТипЗнч(СтруктураПараметровURI) = Тип("Структура") Тогда
	
		Для каждого Параметр Из СтруктураПараметровURI Цикл
			
			Если ТипЗнч(Параметр.Значение) = Тип("Булево") Тогда
				
				Если Параметр.Значение Тогда
				
					ЗначениеПараметра = "true";
					
				Иначе
					
					ЗначениеПараметра = "false";
					
				КонецЕсли;
				
			Иначе
				
				ЗначениеПараметра = Строка(Параметр.Значение);
				
			КонецЕсли;
			
			СтруктураПараметровURI[Параметр.Ключ] = ЗначениеПараметра;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьОбязательныеРеквизиты(СтруктураОтвета, 
										СтруктураПараметровURI = Неопределено, 
										МассивОбязательныхПараметровURI = Неопределено, 
										СтруктураПараметровЗапроса = Неопределено, 
										МассивОбязательныхПараметровЗапроса = Неопределено) Экспорт

	Если ТипЗнч(СтруктураПараметровURI) = Тип("Структура") Тогда
		
		Если ТипЗнч(МассивОбязательныхПараметровURI) = Тип("Массив") Тогда
			
			Для каждого ОбязательныйПараметр Из МассивОбязательныхПараметровURI Цикл
				
				Если СтруктураПараметровURI.Свойство(ОбязательныйПараметр) Тогда
					
					Если НЕ ЗначениеЗаполнено(СтруктураПараметровURI[ОбязательныйПараметр]) Тогда
						
						ДобавитьОшибку("Не заполнено значение обязательного параметра URI: " + ОбязательныйПараметр, СтруктураОтвета.ОписаниеОшибки);
						
					КонецЕсли;
					
				Иначе
					
					ДобавитьОшибку("Не передан обязательный параметр URI: " + ОбязательныйПараметр, СтруктураОтвета.ОписаниеОшибки);
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровURI <> Неопределено Тогда
		
		ДобавитьОшибку("Неизвестный тип структуры параметров URI", СтруктураОтвета.ОписаниеОшибки);
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураПараметровЗапроса) = Тип("Структура") Тогда
		
		Если ТипЗнч(МассивОбязательныхПараметровЗапроса) = Тип("Массив") Тогда
			
			Для каждого ОбязательныйПараметр Из МассивОбязательныхПараметровЗапроса Цикл
			
				Если СтруктураПараметровЗапроса.Свойство(ОбязательныйПараметр) Тогда
					
					Если НЕ ЗначениеЗаполнено(СтруктураПараметровЗапроса[ОбязательныйПараметр]) Тогда
						
						ДобавитьОшибку("Не заполнено значение обязательного параметра запроса: " + ОбязательныйПараметр, СтруктураОтвета.ОписаниеОшибки);
						
					КонецЕсли;
					
				Иначе
					
					ДобавитьОшибку("Не передан обязательный параметр запроса: " + ОбязательныйПараметр, СтруктураОтвета.ОписаниеОшибки);
					
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтруктураПараметровЗапроса) = Тип("Массив") Тогда
		
		Если ТипЗнч(МассивОбязательныхПараметровЗапроса) = Тип("Массив") Тогда
			
			Для каждого ПараметрЗапроса Из СтруктураПараметровЗапроса Цикл
			
				Для каждого ОбязательныйПараметр Из МассивОбязательныхПараметровЗапроса Цикл
				
					Если ПараметрЗапроса.Свойство(ОбязательныйПараметр) Тогда
						
						Если НЕ ЗначениеЗаполнено(ПараметрЗапроса[ОбязательныйПараметр]) Тогда
							
							ДобавитьОшибку("Не заполнено значение обязательного параметра запроса: " + ОбязательныйПараметр, СтруктураОтвета.ОписаниеОшибки);
							
						КонецЕсли;
						
					Иначе
						
						ДобавитьОшибку("Не передан обязательный параметр запроса: " + ОбязательныйПараметр, СтруктураОтвета.ОписаниеОшибки);
						
					КонецЕсли;	
					
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураПараметровЗапроса <> Неопределено Тогда
		
		ДобавитьОшибку("Неизвестный тип структуры параметров запроса", СтруктураОтвета.ОписаниеОшибки);
		
	КонецЕсли;
	
	Возврат ПустаяСтрока(СтруктураОтвета.ОписаниеОшибки);

КонецФункции // ПроверитьОбязательныеРеквизиты()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура КодироватьСтруктуруПараметровДляURL(СтруктураПараметров) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
	
		Для каждого Параметр Из СтруктураПараметров Цикл
			
			Если ТипЗнч(СтруктураПараметров[Параметр.Ключ]) = Тип("Строка") Тогда
			
				СтруктураПараметров[Параметр.Ключ] = КодироватьСтрокуДляURL(Параметр.Значение);
				
			ИначеЕсли ТипЗнч(СтруктураПараметров[Параметр.Ключ]) = Тип("Структура") Тогда
				
				КодироватьСтруктуруПараметровДляURL(Параметр.Значение);
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // КодироватьСтруктуруПараметровURIДляURL()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОшибку(ТекстОшибки, СтрокаОшибок)
	
	Если ПустаяСтрока(СтрокаОшибок) Тогда
		
		СтрокаОшибок = ТекстОшибки;
		
	Иначе
		
		СтрокаОшибок = СтрокаОшибок + Символы.ПС + ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УниверсальноПрочитатьJSON(СтрокаJSON, ОписаниеОшибки)
	
	//с течением времени переделаем на кроссплаформенность с помощью модуля работы с JSON
	
	Попытка
	
		ЧтениеJSON = Новый ЧтениеJSON;
		
		ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
		
		Значение = ПрочитатьJSON(ЧтениеJSON);
		
		Возврат Значение;
		
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		
		Возврат Неопределено;
		
	КонецПопытки;

КонецФункции // ПрочитатьJSON()

#КонецОбласти